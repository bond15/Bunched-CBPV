{-# OPTIONS --cubical #-}
open import CatLib 
open import Agda.Primitive 
open import Cubical.Foundations.Prelude hiding(comp)

module LearnPresheaf {o ‚Ñì} (ùíû : Category o ‚Ñì) where 


    module SetCat where 
        open Category        

        comp : {A B C : Set‚ÇÄ} ‚Üí (B ‚Üí C) ‚Üí (A ‚Üí B) ‚Üí A ‚Üí C 
        comp g f x = g (f x)

        pre : {A B C : Set‚ÇÄ}{g h : B ‚Üí C}{f : A ‚Üí B} ‚Üí (p : g ‚â° h) ‚Üí 
            comp g f ‚â° comp h f
        pre p = cong‚ÇÇ comp p  refl
        
        post : {A B C : Set‚ÇÄ}{h : B ‚Üí C}{f g : A ‚Üí B} ‚Üí (p : f ‚â° g) ‚Üí 
            comp h f ‚â° comp h g
        post p = {!   !}
        
        Sets : Category (lsuc lzero) (lzero)
        Sets .Ob = Set‚ÇÄ
        Sets ._‚áí_ X Y = X ‚Üí Y
        Sets .id x = x
        Sets ._‚àò_ = comp
        Sets .idr = refl
        Sets .idl = refl
        Sets .assoc = refl

        open Terminal Sets 
        open TerminalT

        data Unit : Set‚ÇÄ where 
            tt : Unit

        set-term : TerminalT 
        set-term .‚ä§ =  Unit
        set-term .‚ä§-is-terminal = record { ! = Œª _ ‚Üí tt ; !-unique = Œª f ‚Üí funExt Œª x ‚Üí {!   !}} -- use hlevel argument

    module power where
        open import Cubical.Data.Bool
        open Category

        -- MCP
        ùìü : Set‚ÇÄ ‚Üí Set‚ÇÄ 
        ùìü X = X ‚Üí Bool

        data ‚ä• : Set‚ÇÄ where
        data ‚ä§ : Set‚ÇÄ where
            tt : ‚ä§


        _‚àà_ : {X : Set‚ÇÄ} ‚Üí (√ó : X) ‚Üí (s : ùìü X) ‚Üí Set‚ÇÄ
        x ‚àà s with s x 
        x ‚àà s     | true = ‚ä§
        x ‚àà s     | false = ‚ä•


        _‚äÜ_ : {X : Set‚ÇÄ} ‚Üí ùìü X ‚Üí ùìü X ‚Üí Set‚ÇÄ
        X ‚äÜ Y = ‚àÄ {x} ‚Üí x ‚àà X ‚Üí x ‚àà Y


        data W : Set‚ÇÄ where 
            w1 w2 w3 w4 w5 : W

        _=?_ : W ‚Üí W ‚Üí Bool 
        w1 =? w1 = true
        w2 =? w2 = true
        w3 =? w3 = true
        w4 =? w4 = true
        w5 =? w5 = true
        _ =? _ = false

        singleton : W ‚Üí ùìü W 
        singleton x = x =?_

        World : Category ‚Ñì-zero ‚Ñì-zero 
        World .Ob = ùìü W   
        World ._‚áí_ X Y = X ‚äÜ Y
        World .id x = x
        World ._‚àò_ f g z = f (g z)
        World .idr {f} = refl
        World .idl {f} = refl
        World .assoc {f = f} {g} {h}= refl 

        module WorldExample where

            S‚ÇÅ : ùìü W
            S‚ÇÅ w2 = true
            S‚ÇÅ w3 = true
            S‚ÇÅ _  = false
        
            S‚ÇÇ : ùìü W
            S‚ÇÇ w2 = true
            S‚ÇÇ w3 = true
            S‚ÇÇ w4 = true
            S‚ÇÇ _  = false

            ex‚ÇÅ : S‚ÇÅ ‚äÜ S‚ÇÇ 
            ex‚ÇÅ {w2} tt = tt
            ex‚ÇÅ {w3} tt = tt

            -- no : S‚ÇÇ ‚äÜ S‚ÇÅ 
            -- no {w2} s = tt
            -- no {w3} s = tt
            -- no {w4} s = {!   !} -- impossible


    module Psh {o ‚Ñì} (ùíû : Category o ‚Ñì)  where
        open Category
        open SetCat

        Psh-ùíû : Category (lsuc lzero ‚äî o ‚äî ‚Ñì) (o ‚äî ‚Ñì) 
        Psh-ùíû .Ob = Functor.FunctorT (ùíû ^op) Sets
            -- Objects are functors from ùíû ^op to Set
        Psh-ùíû ._‚áí_ F G = F ‚áõ G
            -- Morphisms are natural transformations 
        Psh-ùíû .id {x = P} = 
            Mknt 
                (Œª o ‚Üí id Sets ) 
                -- The component of the natural transformation is the identity morphism in Set
                (Œª X Y f ‚Üí refl)
                -- The commuting diagram trivially becomes P(f) = P(f)
        (Psh-ùíû ._‚àò_ {x = F} {y = G} {z = H} M N) = 
            (Mknt Œ± commutes ) where 
                Œ±‚ÇÅ : (x : Ob (ùíû ^op)) ‚Üí (Sets ‚áí Functor.FunctorT.F‚ÇÄ F x) (Functor.FunctorT.F‚ÇÄ G x)
                Œ±‚ÇÅ = _‚áõ_.Œ∑ N
                -- F‚ÇÄ(x) ‚Üí G‚ÇÄ(x)

                Œ±‚ÇÇ : (x : Ob ùíû) ‚Üí (Sets ‚áí Functor.FunctorT.F‚ÇÄ G x) (Functor.FunctorT.F‚ÇÄ H x)
                Œ±‚ÇÇ = _‚áõ_.Œ∑ M
                -- G‚ÇÄ(x) ‚Üí H‚ÇÄ(x)

                -- simply compose
                Œ± : (x : Ob ùíû) ‚Üí (Sets ‚áí Functor.FunctorT.F‚ÇÄ F x) (Functor.FunctorT.F‚ÇÄ H x)
                Œ± o = comp (Œ±‚ÇÇ o) (Œ±‚ÇÅ o)

                sq‚ÇÅ = _‚áõ_.is-natural N -- top square
                sq‚ÇÇ = _‚áõ_.is-natural M -- bottom square

                -- this holds because the two squares hold
                open import Cubical.Foundations.Prelude hiding (comp)

                F‚ÇÅ = Functor.FunctorT.F‚ÇÅ F
                G‚ÇÅ = Functor.FunctorT.F‚ÇÅ G
                H‚ÇÅ = Functor.FunctorT.F‚ÇÅ H

                commutes : 
                    (x y : Ob (ùíû ^op)) 
                    (f : ((ùíû ^op) ‚áí x) y) ‚Üí
                        comp (Œ± y) (F‚ÇÅ f) ‚â° comp (H‚ÇÅ f) (Œ± x)
                commutes x y f =  
                        comp (Œ± y) (F‚ÇÅ f)                   ‚â°‚ü® refl ‚ü© 
                        comp (comp (Œ±‚ÇÇ y) (Œ±‚ÇÅ y)) (F‚ÇÅ f)    ‚â°‚ü® sym (Sets .assoc {f = (Œ±‚ÇÇ y)} {g = (Œ±‚ÇÅ y)} {h = (F‚ÇÅ f)}) ‚ü©        
                        comp (Œ±‚ÇÇ y) (comp (Œ±‚ÇÅ y) (F‚ÇÅ f))    ‚â°‚ü® (post {h = Œ±‚ÇÇ y} (sq‚ÇÅ x y f)) ‚ü©
                        comp (Œ±‚ÇÇ y) (comp (G‚ÇÅ f) (Œ±‚ÇÅ x))    ‚â°‚ü® Sets .assoc {f = (Œ±‚ÇÇ y)} {g = G‚ÇÅ f} ‚ü© 
                        comp (comp (Œ±‚ÇÇ y) (G‚ÇÅ f) ) (Œ±‚ÇÅ x)   ‚â°‚ü® pre (sq‚ÇÇ x y f) ‚ü© 
                        comp (comp (H‚ÇÅ f) (Œ±‚ÇÇ x) ) (Œ±‚ÇÅ x)   ‚â°‚ü® sym (Sets .assoc {f = H‚ÇÅ f} {g = Œ±‚ÇÇ x})  ‚ü© 
                        comp (H‚ÇÅ f) (comp (Œ±‚ÇÇ x) ((Œ±‚ÇÅ x)))  ‚â°‚ü® refl ‚ü© 
                        comp (H‚ÇÅ f) (Œ± x) ‚àé


        Psh-ùíû .idr {x = F} {y = G} = Nat-path (Œª o ‚Üí refl) where --the componets are trivially the same (id‚Çì ‚àò Œ±‚Çì ‚â° Œ±‚Çì)
            open NP F G
  
        Psh-ùíû .idl {x = F} {y = G} = Nat-path (Œª o ‚Üí refl) where --the componets are trivially the same (Œ±‚Çì ‚àò id‚Çì ‚â° Œ±‚Çì)
            open NP F G
        Psh-ùíû .assoc {w = F} {z = G}= Nat-path Œª o ‚Üí refl where  -- the components are trivially associative (just associatity of functions in Set)
            open NP F G


        -- the category of presheaves on ùíû is cartesian closed

        open CartesianClosed Psh-ùíû
        open CartesianClosedT

        open BinaryProducts Psh-ùíû 
        open BinaryProductsT hiding (_√ó_)

        open Terminal Psh-ùíû
        open TerminalT

        open Exponentials Psh-ùíû
        open ExponentialsT

        open ObjectProduct Psh-ùíû
        open Product

        open Functor
        --open FunctorT

        open import Cubical.Data.Prod
        Psh-prod : BinaryProductsT
        Psh-prod .product {F} {G} .A√óB = p where

            open Functor.FunctorT G renaming (F‚ÇÄ to G‚ÇÄ ; F‚ÇÅ to G‚ÇÅ)
            open Functor.FunctorT F 
            
            m : {A B : Ob (ùíû ^op)} ‚Üí ((ùíû ^op) ‚áí A) B ‚Üí ((F‚ÇÄ A) √ó (G‚ÇÄ A)) ‚Üí ((F‚ÇÄ B) √ó (G‚ÇÄ B))
            m f (FA , GA) = F‚ÇÅ f FA , G‚ÇÅ f GA

            p : Functor.FunctorT (ùíû ^op) Sets
            p .FunctorT.F‚ÇÄ c = (F‚ÇÄ c) √ó (G‚ÇÄ c) 
            p .FunctorT.F‚ÇÅ = m 
            p .FunctorT.Fid = {!   !} 
            p .FunctorT.Fcomp = {!   !}

        Psh-prod .product {A} {B} .œÄ‚ÇÅ = {!   !}
        Psh-prod .product {A} {B} .œÄ‚ÇÇ = {!   !}
        Psh-prod .product {A} {B} .‚ü®_,_‚ü© = {!   !}
        Psh-prod .product {A} {B} .project‚ÇÅ = {!   !}
        Psh-prod .product {A} {B} .project‚ÇÇ = {!   !}
        Psh-prod .product {A} {B} .unique = {!   !}


        open Functor.FunctorT 
        
        term : Ob Psh-ùíû 
        term .F‚ÇÄ Cob  = Terminal.TerminalT.‚ä§ set-term
        term .F‚ÇÅ f = Œª x ‚Üí x
        term .Fid {F} = refl
        term .Fcomp = refl

        unit-is-prop : is-prop Unit 
        unit-is-prop tt tt = refl

        Psh-term : TerminalT
        Psh-term .‚ä§ = term
        Psh-term .‚ä§-is-terminal = record { ! = ! ; !-unique = uniq } where
                    ! : {A : FunctorT (ùíû ^op) Sets} ‚Üí A ‚áõ term
                    ! = Mknt (Œª X ‚Üí Œª _ ‚Üí tt) Œª X Y f ‚Üí refl

                    uniq : {F : FunctorT (ùíû ^op) Sets} (f : F ‚áõ term) ‚Üí ! ‚â° f 
                    uniq {F} nt = Nat-path Œª Cob ‚Üí funExt Œª x ‚Üí unit-is-prop tt (_‚áõ_.Œ∑ nt Cob x)  
                                    where open NP F term

        Psh-exp : ExponentialsT
        Psh-exp = {!   !}
        
        -- https://rak.ac/blog/2016-08-24-presheaf-categories-are-cartesian-closed/
        CCC-Psh-ùíû : CartesianClosedT 
        CCC-Psh-ùíû .terminal = Psh-term
        CCC-Psh-ùíû .products = Psh-prod
        CCC-Psh-ùíû .exponentials = Psh-exp


        -- yoneda embedding
        -- Mcy
        ùìé : FunctorT ùíû Psh-ùíû
        ùìé .F‚ÇÄ = ùìé‚ÇÄ where 
            ùìé‚ÇÄ : Ob ùíû ‚Üí Ob Psh-ùíû
            ùìé‚ÇÄ c .F‚ÇÄ c' = {! (_‚áí_ ùíû) c' c  !}
            ùìé‚ÇÄ c .F‚ÇÅ = {!   !}
            ùìé‚ÇÄ c .Fid = {!   !}
            ùìé‚ÇÄ c .Fcomp = {!   !}
        ùìé .F‚ÇÅ = {!   !}
        ùìé .Fid = {!   !}
        ùìé .Fcomp = {!   !}


    module Syntax where 

        data VType : Set‚ÇÄ 
        data CType : Set‚ÇÄ

        data VType where 
            One : VType 
            _√óty_ _*_ : VType ‚Üí VType ‚Üí VType
            U : CType ‚Üí VType
        
        data CType where 
            -- \-->
            _‚ü∂_ _-*_ : VType ‚Üí CType ‚Üí CType
            F : VType ‚Üí CType


        data Trm : Set‚ÇÄ where 
            
        
            
    module Semantics where
        open Category
        open power using (World)
        open Psh World
        open Syntax

    
        Psh-World : Category (‚Ñì-suc ‚Ñì-zero) ‚Ñì-zero
        Psh-World = Psh-ùíû

       -- open ObjectProduct
        open BinaryProducts Psh-World
        open BinaryProductsT

        ‚¶Ö_‚¶Üval : VType ‚Üí Psh-World .Ob
        ‚¶Ö_‚¶Ücmp : CType ‚Üí {!   !} 
        
        ‚¶Ö One ‚¶Üval = term
        ‚¶Ö T √óty T‚ÇÅ ‚¶Üval = _√ó_ Psh-prod ‚¶Ö T ‚¶Üval ‚¶Ö T‚ÇÅ ‚¶Üval 
        ‚¶Ö T * T‚ÇÅ ‚¶Üval = {!   !} -- Day convolution?
        ‚¶Ö U T ‚¶Üval = ‚¶Ö T ‚¶Ücmp

        ‚¶Ö_‚¶Ücmp = {!   !}        
 