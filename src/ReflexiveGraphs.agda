module src.ReflexiveGraphs where
    open import Cubical.Foundations.Prelude
    open import Cubical.Data.Sigma 
    open import Cubical.Foundations.HLevels

    module _ {‚Ñì : Level} where 

        record rgraph : Set ((‚Ñì-suc (‚Ñì-suc ‚Ñì))) where
            field 
                V E : Set (‚Ñì-suc ‚Ñì) 
               -- E : Set (‚Ñì-suc (‚Ñì-suc ‚Ñì))
                ‚àÇ‚ÇÄ ‚àÇ‚ÇÅ : E ‚Üí V
                Id : V ‚Üí E
                prop1 : {A : V} ‚Üí (‚àÇ‚ÇÄ (Id A) ‚â° A) 
                prop2 : {A : V} ‚Üí (‚àÇ‚ÇÅ (Id A) ‚â° A)

        open rgraph

        record relator (A B : rgraph) : Set ((‚Ñì-suc (‚Ñì-suc ‚Ñì))) where 
            field 
                Fv : A . V ‚Üí B .V  
                Fe : A . E ‚Üí B .E 
                F‚ÇÄ : {r : A .E} ‚Üí (B .‚àÇ‚ÇÄ) (Fe r) ‚â° Fv ((A .‚àÇ‚ÇÄ r)) 
                F‚ÇÅ : {r : A .E} ‚Üí (B .‚àÇ‚ÇÅ) (Fe r) ‚â° Fv ((A .‚àÇ‚ÇÅ r)) 
                Fi : {a : A .V} ‚Üí Fe (A .Id a) ‚â° B .Id (Fv a)

        open relator

        relator‚â° : {A B : rgraph}{f g : relator A B} ‚Üí 
            f .Fv ‚â° g .Fv ‚Üí 
            f .Fe ‚â° g .Fe ‚Üí 
            f ‚â° g 
        relator‚â° = {!   !}

        IDrelator : {A : rgraph} ‚Üí relator A A 
        IDrelator {A} .Fv v = v
        IDrelator {A} .Fe e = e
        IDrelator {A} .F‚ÇÄ = refl
        IDrelator {A} .F‚ÇÅ = refl
        IDrelator {A} .Fi = refl
        open import Cubical.Foundations.Function

        relcomp : {A B C : rgraph} ‚Üí relator A B ‚Üí relator B C ‚Üí relator A C 
        relcomp {A} {B}{C} f g .Fv = g .Fv ‚àòS f .Fv
        relcomp {A} {B}{C} f g .Fe = g .Fe ‚àòS f .Fe
        relcomp {A} {B}{C} f g .F‚ÇÄ = {!   !}
        relcomp {A} {B}{C} f g .F‚ÇÅ = {!   !}
        relcomp {A} {B}{C} f g .Fi = {!   !}
                
        open import Cubical.Categories.Category
        open Category
        
        RG : Category _ _ 
        RG .ob = rgraph
        RG .Hom[_,_] = relator
        RG .id = IDrelator
        RG ._‚ãÜ_ = relcomp
        RG .‚ãÜIdL _ = relator‚â° refl refl
        RG .‚ãÜIdR _ = relator‚â° refl refl
        RG .‚ãÜAssoc _ _ _ = relator‚â° refl refl
        RG .isSetHom = {!   !}

        --record paramTrans {ùìï ùìñ : ob RG}{F G : relator ùìï ùìñ} : Set ‚Ñì where 
        --    field 
        --        Œ∑ : (A : ùìï .V) ‚Üí {! F .Fv A ‚Üí ? !}


        RG√ó : ob RG ‚Üí ob RG ‚Üí ob RG 
        RG√ó X Y = record{ 
                    V = X . V √ó Y .V
                    ; E = X .E √ó Y .E
                    ; ‚àÇ‚ÇÄ = Œª (xe , ye) ‚Üí (X .‚àÇ‚ÇÄ xe) , (Y .‚àÇ‚ÇÄ ye)
                    ; ‚àÇ‚ÇÅ = Œª (xe , ye) ‚Üí (X .‚àÇ‚ÇÅ xe) , (Y .‚àÇ‚ÇÅ ye)
                    ; Id = Œª (xe , ye) ‚Üí (X .Id xe) , (Y .Id ye)
                    ; prop1 = Œª {(xv , yv)} ‚Üí cong‚ÇÇ _,_ (X .prop1 {xv}) (Y .prop1 {yv})
                    ; prop2 = Œª {(xv , yv)} ‚Üí cong‚ÇÇ _,_ (X .prop2 {xv}) (Y .prop2 {yv})}


        Rel : {‚Ñì : Level}‚Üí (A B : Set ‚Ñì) ‚Üí Set (‚Ñì-suc ‚Ñì) 
        Rel {‚Ñì} a b = a ‚Üí b ‚Üí Set ‚Ñì

        set : ob RG 
        set = record{ 
                V = Set ‚Ñì; 
                E = Œ£ ((Set _) √ó (Set _)) Œª (A , B) ‚Üí Rel A B ;
                ‚àÇ‚ÇÄ = Œª f ‚Üí f .fst .fst; 
                ‚àÇ‚ÇÅ = Œª f ‚Üí f .fst .snd; 
                Id = Œª x ‚Üí (x , x) , _‚â°_ ; 
                prop1 = refl; 
                prop2 = refl}

        hmm‚Üí : relator (RG√ó set set) set 
        hmm‚Üí = record { 
                Fv = Œª (A , B) ‚Üí A ‚Üí B ; 
                Fe = Œª (((A , A'), raa') , ((B , B'), rbb')) ‚Üí 
                    -- related inputs to related outputs
                    ((A ‚Üí B) , (A' ‚Üí B')) , Œª f f' ‚Üí ‚àÄ(a : A)(a' : A') ‚Üí raa' a a' ‚Üí rbb' (f a) (f' a') ; 
                F‚ÇÄ = refl ; 
                F‚ÇÅ = refl ; 
                    -- goal : ((a a' : A) ‚Üí a ‚â° a' ‚Üí f a ‚â° f' a') ‚â° (f ‚â° f')
                Fi = Œª { {(A , B)} ‚Üí Œ£PathP (refl , funExt Œª f ‚Üí funExt Œª f' ‚Üí {!   !})} }

        record paramTransSet (F G : relator set set) : Set _ where 
            field 
                Œ∑ : (A : set .V) ‚Üí F .Fv A ‚Üí G .Fv A
                cond : (A A' : set .V) ‚Üí (Œ∑A : Œ∑ A) ‚Üí ?
                

        what√ó  : relator (RG√ó set set) set 
        what√ó  = record { 
            Fv = Œª (x , y) ‚Üí x √ó y ; 
            Fe = Œª (((A , A') , raa') , ((B , B'), rbb')) ‚Üí 
                -- pairwise related
                ((A √ó B) , (A' √ó B')) , Œª (a , b) (a' , b') ‚Üí raa' a a' √ó rbb' b b' ; 
            F‚ÇÄ = refl ; 
            F‚ÇÅ = refl ; 
                -- goal : (fst X ‚â° fst Y) √ó (snd X ‚â° snd Y) ‚â° (X ‚â° Y)
            Fi = Œª { {A , B} ‚Üí Œ£PathP (refl , funExt Œª X ‚Üí funExt Œª Y ‚Üí {!   !})  }}


        algF : (G : ob RG)‚Üí (F : relator G set) ‚Üí ob RG 
        algF G F = record{ 
                    V = Œ£ (G .V) Œª A ‚Üí F .Fv A;
                    E = {!   !}; 
                    ‚àÇ‚ÇÄ = {!   !}; 
                    ‚àÇ‚ÇÅ = {!   !}; 
                    Id = {!   !}; 
                    prop1 = {!   !}; 
                    prop2 = {!   !}}