{-# OPTIONS --cubical --type-in-type --allow-unsolved-metas #-}
module Day where 

    postulate synTy : Set

    open import world synTy
    open import LearnPresheaf
    open import CatLib
    open Psh WCat
    open Category
    open ProductCat
    open SetCat hiding (Sets)
    -- no
    open import Data.Product

    Psh-ùí≤ : Category _ _ 
    Psh-ùí≤ = Psh-ùíû

    open BiFunctor (Product WCat WCat) ‚ÑìSets ((Product WCat WCat)^op)  -- 2nd 3rd 1st
    open BiFunctorT 

    open Monoidal WCat 
    open MonoidalT MonWCat

    module DayC (X Y : Ob Psh-ùí≤) where 
        Day-diagram : Ob WCat ‚Üí BiFunctorT 
        Day-diagram x .F‚ÇÄ (w1‚Åª , w2‚Åª ) (w1‚Å∫ , w2‚Å∫) = (_‚áí_ WCat x (w1‚Å∫ ‚äó‚ÇÄ w2‚Å∫)) √ó X‚ÇÄ w1‚Åª √ó Y‚ÇÄ w2‚Åª
            where 
                open Functor (WCat ^op) ‚ÑìSets
                open FunctorT X renaming (F‚ÇÄ to X‚ÇÄ ; F‚ÇÅ to X‚ÇÅ ; Fid to Xid ; Fcomp to Xcomp)
                open FunctorT Y renaming (F‚ÇÄ to Y‚ÇÄ ; F‚ÇÅ to Y‚ÇÅ ; Fid to Yid ; Fcomp to Ycomp)
        Day-diagram x .F‚ÇÅ (f1 , f2) g o = {!  X‚ÇÅ f1 !} , ({! X‚ÇÅ   !} , {!   !})
            where 
                open Functor (WCat ^op) ‚ÑìSets
                open FunctorT X renaming (F‚ÇÄ to X‚ÇÄ ; F‚ÇÅ to X‚ÇÅ ; Fid to Xid ; Fcomp to Xcomp)
                open FunctorT Y renaming (F‚ÇÄ to Y‚ÇÄ ; F‚ÇÅ to Y‚ÇÅ ; Fid to Yid ; Fcomp to Ycomp)
        Day-diagram x .Fid = {!   !}
        Day-diagram x .Fcomp = {!   !}
